{
  "articles": [
    {
      "path": "404.html",
      "title": "404",
      "author": [],
      "contents": "\r\nYou may have reached this page in error. Please return to the home page, or open an issue on our GitHub repository.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-15T13:28:00-07:00"
    },
    {
      "path": "index.html",
      "title": "About",
      "description": "We investigated the differential effects of *APOE* alleles on the microglia and astrocyte transcriptome in the absence and presence of neuritic plaques (NPs) using bulk brain RNA-seq data from two large brain banks and performed follow-on experiments in *APOE* knock-in mice.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSetup\r\nCode Availability\r\nData Availability\r\nCitation\r\nAffiliations\r\n\r\nAcknowledgements\r\n\r\nSetup\r\nInstall R to run our code.\r\nCode Availability\r\nOur codebase is available on GitHub at ayushnoori.github.io/apoe-glia.\r\nData Availability\r\nThe ROSMAP and MSBB RNA-seq datasets are available from the AMP-AD Knowledge Portal (DOI: 10.7303/syn3388564 and 10.7303/syn3157743, respectively). Data from the knock-in mice are available from our GitHub repository.\r\nCitation\r\nAlberto Serrano-Pozo, MD PhD1,2,3, Zhaozhi Li, MS1,2, Ayush Noori1,2, Aziz Mezlini, PhD1,2,3, Liang Li, BS1,2, Huong N. Nguyen, BS1,2, Rosemary J. Jackson, PhD1,2,3, Bradley T. Hyman, MD PhD1,2,3, Sudeshna Das, PhD1,2,3. Effect of APOE Alleles on the Glial Transcriptome in Normal Aging and Alzheimer’s Disease.\r\nAffiliations\r\nDepartment of Neurology, Massachusetts General Hospital, Boston MA 02114\r\nMassachusetts Alzheimer’s Disease Research Center, Charlestown MA 02129\r\nHarvard Medical School, Boston MA 02116\r\nAcknowledgements\r\nThis work was supported by the Alzheimer’s Association (AACF-17-524184 to AS-P), National Institute on Aging (K08AG064039 to AS-P, R01AG047644-01, T32AG000222-27, RF1AG058674 and U01NS111671 to BTH, and P30AG062421 to BTH and SD), and the MassCATS project (to SD). ROSMAP was supported by National Institute on Aging grants P30AG10161, R01AG15819, and R01AG17917. The MSBB data were generated from postmortem brain tissue collected through the Mount Sinai VA Medical Center Brain Bank and were provided by Dr. Eric Schadt from the Mount Sinai School of Medicine. The authors would like to acknowledge the Cure Alzheimer’s Foundation, Dr. Wilma Wasco, Dr. David Holtzman, and Dr. Rudolph Tanzi for providing the APOE knock-in mice used in this study.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-15T13:28:02-07:00"
    },
    {
      "path": "qPCR-analysis.html",
      "title": "qPCR Analysis",
      "description": "This script performs analysis of RT-qPCR data.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nDependencies\r\nRead Data\r\nProcess Data\r\nStatistical Analysis\r\nPlot Data\r\nCorrelation Heatmaps\r\nSave Results\r\n\r\nDependencies\r\nLoad requisite packages. Note that the package wilkelab/ggtext hosted on GitHub is used to annotate the plots. This package can be downloaded via devtools::install_github(\"wilkelab/ggtext\").\r\n\r\n\r\n# data manipulation\r\nlibrary(data.table)\r\nlibrary(purrr)\r\nlibrary(magrittr)\r\nlibrary(stringr)\r\n\r\n# file manipulation\r\nlibrary(fs)\r\n\r\n# read and write to Excel files\r\nlibrary(openxlsx)\r\n\r\n# statistical analysis\r\nlibrary(psych)\r\nlibrary(moments)\r\n\r\n# plot data\r\nlibrary(ggplot2)\r\nlibrary(RColorBrewer)\r\nlibrary(ggpubr)\r\n\r\n# caption text and display significance\r\nlibrary(ggtext)\r\nlibrary(ggsignif)\r\n\r\n# heatmap\r\nlibrary(pheatmap)\r\n\r\n\r\n\r\nDefine reference directories.\r\n\r\n\r\n# define analysis name as APOE OR APPPS1 OR LPS\r\nopt = c(\"APOE\", \"APPPS1\", \"LPS\") %>% purrr::set_names(.)\r\nnm = opt[menu(opt, title = \"Please select the desired analysis.\")]\r\n\r\n# define directories\r\nbdir = getwd()\r\nddir = file.path(bdir, \"Data\")\r\nrdir = file.path(bdir, \"Results\", nm)\r\nlogd = file.path(rdir, paste(nm, \"Log.txt\"))\r\n\r\n# source utilities script\r\nsource(file.path(bdir, \"Code\", \"Utilities\", \"Utilities.R\"))\r\n\r\n# overwrite log file\r\nif(file_exists(logd)) file_delete(logd)\r\n\r\n# clear existing analyses\r\nif(dir_exists(rdir)) { \r\n  dir_delete(rdir)\r\n  dir_create(rdir)\r\n  dir_create(file.path(rdir, \"Gene Plots\"))\r\n}\r\n\r\n\r\n\r\nRead Data\r\nRead qPCR results from .xlsx data file. Read \\(\\Delta Ct\\) values.\r\n\r\n\r\n# define function to read data\r\nread_data = function(sheet_number) {\r\n  read.xlsx(file.path(ddir, \"qPCR Data.xlsx\"), sheet = sheet_number) %>%\r\n    as.data.table() %>%\r\n    return()\r\n}\r\n\r\n# read data\r\ndCT = c(1, 4, 7) %>% purrr::set_names(opt) %>%\r\n  .[[nm]] %>% read_data()\r\n\r\n# reorder APOE factor\r\nif(nm == \"LPS\") dCT[, Treatment := factor(Treatment, levels = c(\"PBS\", \"LPS\"))]\r\n\r\n\r\n\r\nProcess Data\r\nGenerate both \\(\\Delta \\Delta Ct\\), and relative quantification (i.e., RQ where \\(RQ = 2^{-\\Delta \\Delta Ct}\\)) values.\r\n\r\n\r\n# create factor variable\r\nfac = list(\"Genotype\", \"Genotype\", c(\"Genotype\", \"Treatment\")) %>% purrr::set_names(opt) %>% .[[nm]]\r\n  \r\n# extract gene names\r\nlab = dCT[, !c(\"Mouse\", \"Sex\", ..fac)] %>% colnames() %>% .[order(.)]\r\n\r\n# calculate average of reference group (i.e., APOE3 OR APOE3/PBS)\r\nctrl = dCT[, map(.SD, ~mean(.x, na.rm = TRUE)), .SDcols = lab, by = fac]\r\n\r\n# select appropriate reference group\r\nctrl = if(nm == \"LPS\") ctrl[Genotype == \"APOE3\" & Treatment == \"PBS\", ..lab] else ctrl[Genotype == \"APOE3\", ..lab]\r\n\r\n# calculate ddCT\r\nddCT = copy(dCT)[, (lab) := map2(.SD, ctrl, ~.x-.y), .SDcols = lab]\r\n\r\n# calculate RQ\r\nRQ = copy(ddCT)[, (lab) := 2^-.SD, .SDcols = lab]\r\n\r\n\r\n\r\nStatistical Analysis\r\nFunctions to generate caption labels.\r\n\r\n\r\ngenerate_label = function(p) {\r\n  \r\n  p = if(p <= 0.0001) signif(p, digits = 2) else round(p, 4)\r\n  \r\n  if(p <= 0.0001) {\r\n    return(paste0(\"<span style = 'color:#C33C54;'>*p* = \", p, \"<\/span>\"))\r\n  } else if (p < 0.05) {\r\n    return(paste0(\"<span style = 'color:#C33C54;'>*p* = \", p, \"<\/span>\"))\r\n  } else if (p < 0.1) {\r\n    return(paste0(\"<span style = 'color:#D4AFB9;'>*p* = \", p, \"<\/span>\"))\r\n  } else if(p >= 0.1) {\r\n    return(\"<span style = 'color:#41414E;'>N.S.<\/span>\")\r\n  }\r\n  \r\n}\r\n\r\ngenerate_caption = function(comparison, label) {\r\n  \r\n  paste0(\"<span style = 'color:#41414E;'>**\", comparison, \":** <\/span>\", label, \"<br>\")\r\n  \r\n}\r\n\r\n# set colors\r\ncolors = if(nm == \"APOE\") c(\"#62BBA5\", \"#785D37\", \"#FFB84D\") else c(\"#785D37\", \"#FFB84D\")\r\n\r\n\r\n\r\nFunction to perform statistical analysis for each gene and create the respective plots. Note that we compute the mean and standard deviation on ddCT then transform by \\(2^{-x}\\) for mean and \\(2^{x}\\) standard deviation (i.e., SD is independent of mean).\r\n\r\n\r\ngene_analysis = function(gene) {\r\n  \r\n  # write output message\r\n  cat(paste0(\"- \", gene, \"\\n\"))\r\n  \r\n  # perform one-way ANOVA on dCT values\r\n  res_aov = if(nm == \"LPS\") aov(get(gene) ~ Genotype * Treatment, data = dCT) else aov(get(gene) ~ Genotype, data = dCT)\r\n  stat_aov = summary(res_aov)[[1]]\r\n  rownames(stat_aov) = trimws(rownames(stat_aov), \"both\")\r\n  \r\n  # perform posthoc Tukey test on dCT values\r\n  res_tukey = TukeyHSD(res_aov)\r\n  stat_tukey = if(nm == \"LPS\") res_tukey %>%\r\n    .[[\"Genotype:Treatment\"]] %>%\r\n    .[c(\"APOE4:LPS-APOE3:LPS\", \"APOE4:PBS-APOE3:PBS\"), ] else res_tukey[[\"Genotype\"]]\r\n  \r\n  # print to log file\r\n  sink(file = logd, append = TRUE)\r\n  cat(paste0(gene, \" ANOVA:\\n\")); print(stat_aov)\r\n  cat(paste0(\"\\n\", gene, \" TUKEY:\\n\")); print(stat_tukey)\r\n  cat(\"\\n\\n\")\r\n  sink()\r\n  \r\n  # create posthoc table\r\n  posthoc =  stat_tukey %>%\r\n    as.data.table(keep.rownames = TRUE) %>%\r\n    setnames(c(\"Comparison\", \"Difference\", \"Lower CI\", \"Upper CI\", \"p\")) %>%\r\n    .[, c(\"Start\", \"End\") := strsplit(Comparison, \"-\") %>% { .(map_chr(., 2), map_chr(., 1)) }]\r\n  \r\n  # reorder for APOE\r\n  if(nm == \"APOE\") { posthoc = posthoc[c(1, 3, 2), ] } # E2/E3, E3/E4, E2/E4 \r\n  \r\n  # rename for LPS\r\n  if(nm == \"LPS\") {\r\n    posthoc = posthoc %>% \r\n      .[, Treatment := map_chr(strsplit(Start, \":\"), 2)] %>%\r\n      .[, Treatment := factor(Treatment, levels = c(\"PBS\", \"LPS\"))] %>%\r\n      .[, Start := map_chr(strsplit(Start, \":\"), 1)] %>%\r\n      .[, End := map_chr(strsplit(End, \":\"), 1)]\r\n  }\r\n  \r\n  # create output table\r\n  comps = if(nm == \"LPS\") posthoc[, paste0( Treatment, \" \", Start, \"/\", End)] else posthoc[, paste(Start, End, sep = \"/\")]\r\n  output = data.table(Gene = gene)\r\n  \r\n  # function to add columns by reference\r\n  create_anova_col = function(cn) { output[, paste(\"ANOVA\", cn, c(\"p\", \"p adj.\")) := .(stat_aov[cn, \"Pr(>F)\"], stat_aov[cn, \"Pr(>F)\"])] }\r\n  create_tukey_col = function(cn) { output[, paste(comps, cn) := as.list(posthoc[[cn]])] }\r\n  \r\n  # create ANOVA columns\r\n  { if(nm == \"LPS\") c(\"Genotype\", \"Treatment\", \"Genotype:Treatment\") else c(\"Genotype\") } %>%\r\n    walk(create_anova_col)\r\n  \r\n  # create Tukey columns\r\n  if(nm == \"APOE\") walk(c(\"Difference\", \"Lower CI\", \"Upper CI\", \"p\"), create_tukey_col)\r\n  \r\n  # reorder columns to group by comparison\r\n  unlist(map(comps, ~grep(.x, colnames(output)))) %>%\r\n    c(1:(ncol(output)-length(.)), .) %>%\r\n    setcolorder(output, .)\r\n  \r\n  # calculate mean and SD of RQ values, then ensure error bars are not negative\r\n  desc = describeBy(RQ[, ..gene], RQ[, ..fac], mat = TRUE, digits = 4) %>%\r\n    as.data.table() %>%\r\n    setnames(c(\"group1\", \"group2\"), c(\"Genotype\", \"Treatment\"), skip_absent = TRUE) %>%\r\n    .[, .SD, .SDcols = c(fac, \"mean\", \"sd\", \"se\")] %>%\r\n    .[, c(\"maxY\", \"minY\") := .(mean + se, mean - se)] %>%\r\n    .[minY < 0, minY := 0]\r\n  \r\n  # refactor order for LPS/PBS only\r\n  if(nm == \"LPS\") desc[, Treatment := factor(Treatment, levels = c(\"PBS\", \"LPS\"))]\r\n  \r\n  # calculate range of RQ values\r\n  range_RQ = RQ[, max(.SD, na.rm = T) - min(.SD, na.rm = T), .SDcols = gene]\r\n  \r\n  # set significance bar height\r\n  posthoc = posthoc %>%\r\n    .[, Height := desc[, max(mean + 1.3*sd)] + range_RQ*seq(0, 0.2, length.out = nrow(.))] %>%\r\n    .[, Label := paste(\"p =\", round(p, 4))] %>%\r\n    .[!(p > 0.1), ]\r\n  \r\n  # adjust bar height for PBS/LPS\r\n  if(nrow(posthoc) > 0 & nm == \"LPS\") {\r\n    posthoc = posthoc %>% \r\n      merge(desc[, max(mean + 1.3*sd), by = \"Treatment\"], by = \"Treatment\", all = TRUE) %>%\r\n      setnames(\"V1\", \"GroupHeight\")\r\n  }\r\n  \r\n  # create caption labels\r\n  caption_labels = stat_aov %>%\r\n    .[!(rownames(.) == \"Residuals\"), ] %>%\r\n    { data.table(Comparison = rownames(.), pVal = .[, \"Pr(>F)\"]) } %>%\r\n    .[Comparison == \"Genotype:Treatment\", Comparison := \"Interaction\"] %>%\r\n    .[, Label := map_chr(pVal, generate_label)]\r\n  \r\n  # create caption\r\n  caption = paste0(pmap_chr(caption_labels[, .(Comparison, Label)], ~generate_caption(.x, .y)), collapse = \"\")\r\n  \r\n  # add dummy facet variable\r\n  if(nm == \"APOE\") { desc[, Treatment := \"\"] }\r\n  if(nm == \"APPPS1\") { desc[, Treatment := \"\"] }\r\n  \r\n  # create barplot\r\n  bp = ggplot(desc, aes(x = Genotype, y = mean, color = Genotype, group = Genotype)) +\r\n    geom_bar(stat = \"identity\", fill = \"white\", size = 1, width = 0.5) +\r\n    scale_color_manual(values = colors) +\r\n    geom_errorbar(aes(ymax = maxY, ymin = minY), color = \"#41414E\", width = 0.25) +\r\n    geom_jitter(data = RQ, aes(x = Genotype, y = .data[[gene]], color = Genotype, shape = Sex),\r\n                size = 2, width = 0.15) +\r\n    ggtitle(gene) + xlab(\"\") + labs(caption = caption) +\r\n    ylab(bquote(bold('Expression Fold-Change ('*2^{-Delta*Delta*bolditalic(Ct)}*')'))) +\r\n    scale_y_continuous(expand = expansion(mult = c(-0.01, .1))) +\r\n    theme_linedraw() +\r\n    guides(fill = FALSE, color = FALSE, shape = FALSE) +\r\n    theme(plot.title = element_text(size = 20, hjust = 0.5, color = \"#41414E\", face = \"bold.italic\"),\r\n          plot.caption = element_markdown(hjust = 0.5, size = 16),\r\n          axis.text.x.bottom = element_text(size = 12, face = \"bold.italic\", color = \"#41414E\"),\r\n          axis.title.y = element_text(size = 14, face = \"bold\", color = \"#41414E\"),\r\n          strip.background = element_rect(fill = \"#5D5D6F\"),\r\n          strip.text = element_text(size=14, color = \"white\", face = \"bold\"),\r\n          panel.background = element_rect(fill = \"#FDF5ED\"),\r\n          axis.text.x = element_text(size=12, color = \"#41414E\", face = \"italic\"),\r\n          axis.ticks.x = element_blank(),\r\n          panel.grid = element_blank()\r\n    )\r\n  \r\n  # add facet\r\n  bp = bp + facet_wrap(~ Treatment)\r\n  \r\n  # save plot\r\n  ggsave(file.path(rdir, \"Gene Plots\", paste(gene, nm, \"Plot.pdf\")), bp, width = 5, height = 6)\r\n  \r\n  # return plot\r\n  return(list(bp + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, \"cm\")), output))\r\n  \r\n}\r\n\r\n\r\n\r\nPlot Data\r\nMap gene_analysis function over list of genes to create individual plots.\r\n\r\n\r\n# run analysis\r\ncat(paste(nm, \"ANALYSIS:\\n\"))\r\nplots = map(lab, gene_analysis) %>%\r\n  purrr::set_names(lab)\r\n\r\n# separate output\r\noutput = map_dfr(plots, 2)\r\nplots = map(plots, 1)\r\n\r\n# fix column names\r\nif(nm == \"LPS\") colnames(output) = gsub(\"Genotype:Treatment\", \"Interaction\", colnames(output))\r\n\r\n# adjust p-values for multiple comparisons\r\nadj = colnames(output) %>% .[grep(\"adj.\", ., fixed = TRUE)]\r\noutput[, (adj) := map(.SD, ~p.adjust(.x, method = \"BH\")), .SDcols = adj]\r\n\r\n# save output\r\nfwrite(output, file.path(rdir, paste(nm, \"Statistical Results.csv\")))\r\n\r\n\r\n\r\nAggregate individual plots to create composite figure. First create the shared legend and define a function to create the shared y-axes.\r\n\r\n\r\n# create legend\r\nleg = { ggplot(RQ, aes(x = Genotype, y = Gfap, color = Genotype, shape = Sex)) +\r\n    scale_color_manual(values = colors) +\r\n    geom_jitter(size = 2, width = 0.1) + \r\n    theme(legend.title = element_text(size = 18, face = \"bold\", color = \"#41414E\"),\r\n          legend.text = element_text(size = 14, color = \"#41414E\"),\r\n          legend.position = \"top\") } %>%\r\n  get_legend()\r\n\r\n# create shared y-axis per row\r\nshared_y = function(p, idx, nwidth) {if((idx - 1) %% nwidth == 0) return(p) else return(p + rremove(\"ylab\"))}\r\n\r\n\r\n\r\nFunction to aggregate plots.\r\n\r\n\r\n# function to aggregate plots\r\naggregate_plots = function(plist, pcol, plab) {\r\n  \r\n  # subset markers and create shared axis\r\n  plist = plots[plist] %>%\r\n    map2(seq_along(.), ~shared_y(.x, .y, pcol))\r\n  \r\n  # get number of rows\r\n  prow = ceiling(length(plist)/pcol)\r\n  \r\n  # join plots together\r\n  composite = ggarrange(plotlist = plist, ncol = pcol, nrow = prow,\r\n                        legend.grob = leg, legend = \"bottom\",\r\n                        widths = c(1.117, rep(1, pcol - 1)))\r\n  \r\n  # save figure\r\n  ggsave(file.path(rdir, paste(nm, plab, \"qPCR Plots.pdf\")), composite,\r\n         width = 3.6*pcol, height = 6*prow)\r\n  \r\n}\r\n\r\n\r\n\r\nCreate the composite figures.\r\n\r\n\r\n# define main and supplemental markers\r\nmks = list(Main = c('Trem2', 'Tyrobp', 'C1qa', 'Cd68', 'P2ry12', 'C3', 'Cd74', 'Spp1', 'Msr1', 'Tgfbr1'), Supplemental = c('Cx3cr1', 'Gfap', 'Clu', 'huAPOE'))\r\n\r\n# adjust for extra LPS genes\r\nif(nm == \"LPS\") { mks$Supplemental = c('Tnfa', 'Il1b', mks$Supplemental); rc = c(5, 4) } else rc = c(5, 4)\r\n\r\n# create composite figures\r\npwalk(list(mks, rc, names(mks)), ~aggregate_plots(...))\r\n\r\n\r\n\r\nCorrelation Heatmaps\r\nCompute Spearman correlations and visualize the correlation matrix in a heatmap.\r\n\r\n\r\n# subset dCT data\r\ncor_dat = dCT[, ..lab]\r\nprint(sapply(cor_dat, function(x) agostino.test(as.numeric(x), alternative = \"two.sided\")$p.value))\r\n\r\n# calculate correlation, define new names\r\ncor_dat = corr.test(cor_dat, method = \"spearman\", use = \"pairwise\")$r\r\nnewnames = map(rownames(cor_dat), ~bquote(italic(.(.x))))\r\n\r\n# plot heatmap\r\nhm = pheatmap(cor_dat,\r\n              color = colorRampPalette(c(\"#313695\", \"#8FC3DC\", \"#E3E0DD\", \"#F88D52\", \"#A50026\"))(100),\r\n              breaks = seq(from = -1, to = 1, length.out = 101),\r\n              cellwidth = 25, cellheight = 25,\r\n              cluster_cols = TRUE, cluster_rows = TRUE,\r\n              border_color = NA,\r\n              show_colnames = TRUE,\r\n              show_rownames = TRUE,\r\n              silent = TRUE,\r\n              labels_row = as.expression(newnames),\r\n              labels_col = as.expression(newnames))\r\n\r\n# save figure\r\nif(nm == \"LPS\") ggsave(file.path(rdir, paste(nm, \"Correlation Heatmap.pdf\")), hm, width = 8, height = 7.77) else ggsave(file.path(rdir, paste(nm, \"Correlation Heatmap.pdf\")), hm, width = 7, height = 6.8)\r\n\r\n\r\n\r\nSave Results\r\nSave statistical results and correlation matrix as worksheets in an Excel workbook.\r\n\r\n\r\n# create workbook object\r\nwb = createWorkbook()\r\n\r\n# add statistical sheet\r\ns1 = paste(nm, \"Statistical Results\")\r\naddWorksheet(wb, sheetName = s1)\r\nidx1 = 2:(nrow(output) + 1)\r\n\r\n# add correlation sheet\r\ns2 = paste(nm, \"Correlation Matrix\")\r\naddWorksheet(wb, sheetName = s2)\r\nidx2 = 2:(nrow(cor_dat) + 1)\r\n\r\n# define header style\r\nhs = createStyle(fontColour = \"#FFFFFF\", fgFill = \"#1A1B41\", fontName = \"Arial Black\",\r\n                 halign = \"center\", valign = \"center\", textDecoration = \"bold\",\r\n                 border = \"bottom\", borderStyle = \"thick\", fontSize = 10)\r\n\r\n# define row styles\r\nr1 = createStyle(fontColour = \"#363635\", fgFill = \"#FFFFFF\", fontName = \"Arial\",\r\n                 fontSize = 10, halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\")\r\nr2 = createStyle(fontColour = \"#363635\", fgFill = \"#F6F4F4\", fontName = \"Arial\",\r\n                 fontSize = 10, halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\")\r\n\r\n# write output\r\nwriteData(wb, s1, x = output, headerStyle = hs)\r\n\r\n# write correlation matrix\r\nhm$tree_row %>%\r\n  {.$labels[.$order]} %>%\r\n  cor_dat[., .] %>%\r\n  as.data.table(keep.rownames = \"\") %>%\r\n  writeData(wb, s2, x = ., headerStyle = hs)\r\n\r\n# set column widths and row heights for statistical results\r\nsetColWidths(wb, s1, idx1, 30)\r\nsetRowHeights(wb, s1, idx2, 20)\r\n\r\n# set column widths and row heights for correlation matrix\r\nsetColWidths(wb, s2, idx2, 10)\r\nsetColWidths(wb, s2, 1, 10/6)\r\nsetRowHeights(wb, s2, idx2, 60)\r\n\r\n# add row styling for statistical results\r\naddStyle(wb, s1, r1, rows = idx1, cols = 1:ncol(output), gridExpand = T)\r\nfreezePane(wb, s1, firstRow = TRUE, firstCol = TRUE)\r\n\r\n# add striped header styling for statistical results\r\nif(nm == \"APOE\") {\r\n  addStyle(wb, s1, createStyle(fgFill = \"#CEEAE3\"),\r\n           cols = grep(\"APOE2/APOE3\", colnames(output)), rows = idx1, stack = TRUE, gridExpand = T)\r\n  addStyle(wb, s1, createStyle(fgFill = \"#DECEB8\"),\r\n           cols = grep(\"APOE3/APOE4\", colnames(output)), rows = idx1, stack = TRUE, gridExpand = T)\r\n  addStyle(wb, s1, createStyle(fgFill = \"#FFE9C8\"),\r\n           cols = grep(\"APOE2/APOE4\", colnames(output)), rows = idx1, stack = TRUE, gridExpand = T)\r\n# } else if(nm == \"LPS\") {\r\n#   addStyle(wb, s1, createStyle(fgFill = \"#DECEB8\"),\r\n#            cols = grep(\"PBS\", colnames(output)), rows = idx1, stack = TRUE, gridExpand = T)\r\n#   addStyle(wb, s1, createStyle(fgFill = \"#FFE9C8\"),\r\n#            cols = grep(\"LPS\", colnames(output)), rows = idx1, stack = TRUE, gridExpand = T)\r\n} else {\r\n  idx1[which(idx1 %% 2 == 0)] %>% addStyle(wb, s1, r2, rows = ., cols = 1:ncol(output), gridExpand = T)\r\n}\r\n\r\n# add header styling for statistical results\r\naddStyle(wb, s1, createStyle(textDecoration = \"italic\"), rows = idx1, cols = 1, stack = TRUE)\r\naddStyle(wb, s1, createStyle(textDecoration = \"bold\", fgFill = \"#ECD6D5\"),\r\n         rows = idx1, cols = 1, stack = TRUE)\r\n\r\n# add row styling for correlation matrix\r\naddStyle(wb, s2, r2, rows = idx2, cols = idx2, gridExpand = T)\r\nidx2[which(idx2 %% 2 == 0)] %>% { \r\n  addStyle(wb, s2, r2, rows = ., cols = ., gridExpand = T)\r\n  addStyle(wb, s2, r2, rows = ., cols = ., gridExpand = T)\r\n}\r\n\r\n# add header style for correlation matrix\r\naddStyle(wb, s2, hs, rows = idx2, cols = 1, gridExpand = T)\r\naddStyle(wb, s2, createStyle(textRotation = 90), rows = idx2, cols = 1, stack = TRUE)\r\n\r\n# add conditional formatting\r\nconditionalFormatting(wb, s2, idx2, idx2, type = \"colourScale\",\r\n                      style = c(\"#5A8AC6\", \"#FCFCFF\", \"#F8696B\"))\r\n\r\n# save workbook\r\nsaveWorkbook(wb, file.path(rdir, paste(nm, \"Supplementary Table.xlsx\")), overwrite = TRUE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-15T13:28:11-07:00"
    }
  ],
  "collections": []
}
